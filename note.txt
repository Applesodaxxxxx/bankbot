class ActionCheckBalance(Action):
    def name(self) -> str:
        return "action_check_balance"

    def run(self, dispatcher: CollectingDispatcher, tracker: Tracker, domain: dict):
        # Retrieve the user_id slot
        user_id = tracker.get_slot("user_id")

        if not user_id:
            dispatcher.utter_message(text="I couldn't retrieve your user ID. Please provide it.")
            return []

        try:
            # Load the CSV file
            user_data = pd.read_csv(csv_file_path)

            # Ensure user_id is checked as a string for consistency
            user_data["user_id"] = user_data["user_id"].astype(str)

            # Search for the user_id in the DataFrame
            user_record = user_data[user_data["user_id"] == str(user_id)]

            if not user_record.empty:
                # Retrieve balance if user is found
                balance = user_record.iloc[0]["balance"]

                # Use the 'utter_provide_balance' response with placeholders
                dispatcher.utter_message(
                    response="utter_provide_balance",
                    user_id=user_id,
                    balance=f"${balance:.2f}"  # Format balance to two decimal places
                )
            else:
                # User ID not found
                dispatcher.utter_message(
                    text="I couldn't find your account information. Please double-check your user ID."
                )
        except FileNotFoundError:
            dispatcher.utter_message(
                text="The user data file is missing. Please contact support to resolve this issue."
            )
        except Exception as e:
            dispatcher.utter_message(
                text="An error occurred while processing your request. Please try again later."
            )
            print(f"Error: {e}")

        return []